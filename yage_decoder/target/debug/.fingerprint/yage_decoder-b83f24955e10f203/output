{"message":"unused import: `LitStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":177,"byte_end":183,"line_start":7,"line_end":7,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, ExprArray, LitInt, LitStr, Result, Token};","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":175,"byte_end":183,"line_start":7,"line_end":7,"column_start":47,"column_end":55,"is_primary":true,"text":[{"text":"use syn::{parse_macro_input, ExprArray, LitInt, LitStr, Result, Token};","highlight_start":47,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `LitStr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:7:49\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse syn::{parse_macro_input, ExprArray, LitInt, LitStr, Result, Token};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"the trait bound `syn::ExprArray: syn::parse::Parse` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1482,"byte_end":1487,"line_start":57,"line_end":57,"column_start":30,"column_end":35,"is_primary":true,"text":[{"text":"                value: input.parse()?,","highlight_start":30,"highlight_end":35}],"label":"the trait `syn::parse::Parse` is not implemented for `syn::ExprArray`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `syn::ExprArray: syn::parse::Parse` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:57:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                value: input.parse()?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::parse::Parse` is not implemented for `syn::ExprArray`\u001b[0m\n\n"}
{"message":"variant `Argument::Cycles` has no field named `cycles_token`","code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1841,"byte_end":1853,"line_start":67,"line_end":67,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"                cycles_token: input.parse::<kw::cycles>()?,","highlight_start":17,"highlight_end":29}],"label":"`Argument::Cycles` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `lenght_token`, `eq_token`, `value`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0559]\u001b[0m\u001b[0m\u001b[1m: variant `Argument::Cycles` has no field named `cycles_token`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:67:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                cycles_token: input.parse::<kw::cycles>()?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Argument::Cycles` does not have this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `lenght_token`, `eq_token`, `value`\u001b[0m\n\n"}
{"message":"variant `Argument::Flags` has no field named `flags_token`","code":{"code":"E0559","explanation":"An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2076,"byte_end":2087,"line_start":73,"line_end":73,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                flags_token: input.parse::<kw::flags>()?,","highlight_start":17,"highlight_end":28}],"label":"`Argument::Flags` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `lenght_token`, `eq_token`, `value`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0559]\u001b[0m\u001b[0m\u001b[1m: variant `Argument::Flags` has no field named `flags_token`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:73:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                flags_token: input.parse::<kw::flags>()?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Argument::Flags` does not have this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `lenght_token`, `eq_token`, `value`\u001b[0m\n\n"}
{"message":"the trait bound `syn::ExprArray: syn::parse::Parse` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2189,"byte_end":2194,"line_start":75,"line_end":75,"column_start":30,"column_end":35,"is_primary":true,"text":[{"text":"                value: input.parse()?,","highlight_start":30,"highlight_end":35}],"label":"the trait `syn::parse::Parse` is not implemented for `syn::ExprArray`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `syn::ExprArray: syn::parse::Parse` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:75:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                value: input.parse()?,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::parse::Parse` is not implemented for `syn::ExprArray`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can happen in several cases, the most common being a mismatch\nbetween the type that the compiler inferred for a variable based on its\ninitializing expression, on the one hand, and the type the author explicitly\nassigned to the variable, on the other hand.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2454,"byte_end":2465,"line_start":84,"line_end":84,"column_start":69,"column_end":80,"is_primary":true,"text":[{"text":"pub fn declare_instruction(args: TokenStream, item: TokenStream) -> TokenStream {","highlight_start":69,"highlight_end":80}],"label":"expected struct `proc_macro::TokenStream`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":2393,"byte_end":2412,"line_start":84,"line_end":84,"column_start":8,"column_end":27,"is_primary":false,"text":[{"text":"pub fn declare_instruction(args: TokenStream, item: TokenStream) -> TokenStream {","highlight_start":8,"highlight_end":27}],"label":"implicitly returns `()` as its body has no tail or `return` expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:84:69\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn declare_instruction(args: TokenStream, item: TokenStream) -> TokenStream {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `proc_macro::TokenStream`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimplicitly returns `()` as its body has no tail or `return` expression\u001b[0m\n\n"}
{"message":"the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22340,"byte_end":22345,"line_start":727,"line_end":727,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `syn::export::quote::ToTokens` is not implemented for `Argument`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":23619,"byte_end":23661,"line_start":764,"line_end":764,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22556,"byte_end":22598,"line_start":731,"line_end":731,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13702,"byte_end":13772,"line_start":468,"line_end":468,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2683,"byte_end":2932,"line_start":92,"line_end":100,"column_start":21,"column_end":6,"is_primary":false,"text":[{"text":"    let generated = quote! {","highlight_start":21,"highlight_end":29},{"text":"        pub struct #typename {","highlight_start":1,"highlight_end":31},{"text":"            opcode: #args.opcode.value,","highlight_start":1,"highlight_end":40},{"text":"            regs: #args.regs.value,","highlight_start":1,"highlight_end":36},{"text":"            lenght: #args.lenght.value,","highlight_start":1,"highlight_end":40},{"text":"            cycles: #args.cycles.value,","highlight_start":1,"highlight_end":40},{"text":"            flags:  #args.flags.value","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13651,"byte_end":13781,"line_start":466,"line_end":470,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote {","highlight_start":1,"highlight_end":21},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22640,"byte_end":28773,"line_start":737,"line_end":954,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":27},{"text":"    ($tokens:ident $span:ident ( $($inner:tt)* )) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Parenthesis,","highlight_start":1,"highlight_end":59},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident [ $($inner:tt)* ]) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Bracket,","highlight_start":1,"highlight_end":55},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident { $($inner:tt)* }) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Brace,","highlight_start":1,"highlight_end":53},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_add(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_add_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &&) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":62},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident @) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":65},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $ident:ident) => {","highlight_start":1,"highlight_end":50},{"text":"        $crate::__private::push_ident(&mut $tokens, $span, stringify!($ident));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__private::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":75},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by `syn::export::quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:92:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let generated = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct #typename {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            opcode: #args.opcode.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            regs: #args.regs.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::export::quote::ToTokens` is not implemented for `Argument`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `syn::export::quote::ToTokens::to_tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22340,"byte_end":22345,"line_start":727,"line_end":727,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `syn::export::quote::ToTokens` is not implemented for `Argument`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":23619,"byte_end":23661,"line_start":764,"line_end":764,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22556,"byte_end":22598,"line_start":731,"line_end":731,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13702,"byte_end":13772,"line_start":468,"line_end":468,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2683,"byte_end":2932,"line_start":92,"line_end":100,"column_start":21,"column_end":6,"is_primary":false,"text":[{"text":"    let generated = quote! {","highlight_start":21,"highlight_end":29},{"text":"        pub struct #typename {","highlight_start":1,"highlight_end":31},{"text":"            opcode: #args.opcode.value,","highlight_start":1,"highlight_end":40},{"text":"            regs: #args.regs.value,","highlight_start":1,"highlight_end":36},{"text":"            lenght: #args.lenght.value,","highlight_start":1,"highlight_end":40},{"text":"            cycles: #args.cycles.value,","highlight_start":1,"highlight_end":40},{"text":"            flags:  #args.flags.value","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13651,"byte_end":13781,"line_start":466,"line_end":470,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote {","highlight_start":1,"highlight_end":21},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22640,"byte_end":28773,"line_start":737,"line_end":954,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":27},{"text":"    ($tokens:ident $span:ident ( $($inner:tt)* )) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Parenthesis,","highlight_start":1,"highlight_end":59},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident [ $($inner:tt)* ]) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Bracket,","highlight_start":1,"highlight_end":55},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident { $($inner:tt)* }) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Brace,","highlight_start":1,"highlight_end":53},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_add(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_add_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &&) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":62},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident @) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":65},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $ident:ident) => {","highlight_start":1,"highlight_end":50},{"text":"        $crate::__private::push_ident(&mut $tokens, $span, stringify!($ident));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__private::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":75},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by `syn::export::quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:92:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let generated = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct #typename {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            opcode: #args.opcode.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            regs: #args.regs.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::export::quote::ToTokens` is not implemented for `Argument`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `syn::export::quote::ToTokens::to_tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22340,"byte_end":22345,"line_start":727,"line_end":727,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `syn::export::quote::ToTokens` is not implemented for `Argument`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":23619,"byte_end":23661,"line_start":764,"line_end":764,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22556,"byte_end":22598,"line_start":731,"line_end":731,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13702,"byte_end":13772,"line_start":468,"line_end":468,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2683,"byte_end":2932,"line_start":92,"line_end":100,"column_start":21,"column_end":6,"is_primary":false,"text":[{"text":"    let generated = quote! {","highlight_start":21,"highlight_end":29},{"text":"        pub struct #typename {","highlight_start":1,"highlight_end":31},{"text":"            opcode: #args.opcode.value,","highlight_start":1,"highlight_end":40},{"text":"            regs: #args.regs.value,","highlight_start":1,"highlight_end":36},{"text":"            lenght: #args.lenght.value,","highlight_start":1,"highlight_end":40},{"text":"            cycles: #args.cycles.value,","highlight_start":1,"highlight_end":40},{"text":"            flags:  #args.flags.value","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13651,"byte_end":13781,"line_start":466,"line_end":470,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote {","highlight_start":1,"highlight_end":21},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22640,"byte_end":28773,"line_start":737,"line_end":954,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":27},{"text":"    ($tokens:ident $span:ident ( $($inner:tt)* )) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Parenthesis,","highlight_start":1,"highlight_end":59},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident [ $($inner:tt)* ]) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Bracket,","highlight_start":1,"highlight_end":55},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident { $($inner:tt)* }) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Brace,","highlight_start":1,"highlight_end":53},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_add(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_add_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &&) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":62},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident @) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":65},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $ident:ident) => {","highlight_start":1,"highlight_end":50},{"text":"        $crate::__private::push_ident(&mut $tokens, $span, stringify!($ident));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__private::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":75},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by `syn::export::quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:92:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let generated = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct #typename {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            opcode: #args.opcode.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            regs: #args.regs.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::export::quote::ToTokens` is not implemented for `Argument`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `syn::export::quote::ToTokens::to_tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22340,"byte_end":22345,"line_start":727,"line_end":727,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `syn::export::quote::ToTokens` is not implemented for `Argument`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":23619,"byte_end":23661,"line_start":764,"line_end":764,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22556,"byte_end":22598,"line_start":731,"line_end":731,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13702,"byte_end":13772,"line_start":468,"line_end":468,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2683,"byte_end":2932,"line_start":92,"line_end":100,"column_start":21,"column_end":6,"is_primary":false,"text":[{"text":"    let generated = quote! {","highlight_start":21,"highlight_end":29},{"text":"        pub struct #typename {","highlight_start":1,"highlight_end":31},{"text":"            opcode: #args.opcode.value,","highlight_start":1,"highlight_end":40},{"text":"            regs: #args.regs.value,","highlight_start":1,"highlight_end":36},{"text":"            lenght: #args.lenght.value,","highlight_start":1,"highlight_end":40},{"text":"            cycles: #args.cycles.value,","highlight_start":1,"highlight_end":40},{"text":"            flags:  #args.flags.value","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13651,"byte_end":13781,"line_start":466,"line_end":470,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote {","highlight_start":1,"highlight_end":21},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22640,"byte_end":28773,"line_start":737,"line_end":954,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":27},{"text":"    ($tokens:ident $span:ident ( $($inner:tt)* )) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Parenthesis,","highlight_start":1,"highlight_end":59},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident [ $($inner:tt)* ]) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Bracket,","highlight_start":1,"highlight_end":55},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident { $($inner:tt)* }) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Brace,","highlight_start":1,"highlight_end":53},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_add(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_add_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &&) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":62},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident @) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":65},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $ident:ident) => {","highlight_start":1,"highlight_end":50},{"text":"        $crate::__private::push_ident(&mut $tokens, $span, stringify!($ident));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__private::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":75},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by `syn::export::quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:92:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let generated = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct #typename {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            opcode: #args.opcode.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            regs: #args.regs.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::export::quote::ToTokens` is not implemented for `Argument`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `syn::export::quote::ToTokens::to_tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22340,"byte_end":22345,"line_start":727,"line_end":727,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":37,"highlight_end":42}],"label":"the trait `syn::export::quote::ToTokens` is not implemented for `Argument`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":23619,"byte_end":23661,"line_start":764,"line_end":764,"column_start":17,"column_end":59,"is_primary":false,"text":[{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":17,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22556,"byte_end":22598,"line_start":731,"line_end":731,"column_start":9,"column_end":51,"is_primary":false,"text":[{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":9,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19674,"byte_end":19753,"line_start":674,"line_end":674,"column_start":13,"column_end":92,"is_primary":false,"text":[{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":13,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19103,"byte_end":19409,"line_start":653,"line_end":661,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":9,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":17062,"byte_end":17106,"line_start":573,"line_end":573,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13702,"byte_end":13772,"line_start":468,"line_end":468,"column_start":9,"column_end":79,"is_primary":false,"text":[{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":9,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2683,"byte_end":2932,"line_start":92,"line_end":100,"column_start":21,"column_end":6,"is_primary":false,"text":[{"text":"    let generated = quote! {","highlight_start":21,"highlight_end":29},{"text":"        pub struct #typename {","highlight_start":1,"highlight_end":31},{"text":"            opcode: #args.opcode.value,","highlight_start":1,"highlight_end":40},{"text":"            regs: #args.regs.value,","highlight_start":1,"highlight_end":36},{"text":"            lenght: #args.lenght.value,","highlight_start":1,"highlight_end":40},{"text":"            cycles: #args.cycles.value,","highlight_start":1,"highlight_end":40},{"text":"            flags:  #args.flags.value","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"quote!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":13651,"byte_end":13781,"line_start":466,"line_end":470,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote {","highlight_start":1,"highlight_end":21},{"text":"    ($($tt:tt)*) => {","highlight_start":1,"highlight_end":22},{"text":"        $crate::quote_spanned!($crate::__private::Span::call_site()=> $($tt)*)","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":22640,"byte_end":28773,"line_start":737,"line_end":954,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token {","highlight_start":1,"highlight_end":27},{"text":"    ($tokens:ident $span:ident ( $($inner:tt)* )) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Parenthesis,","highlight_start":1,"highlight_end":59},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident [ $($inner:tt)* ]) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Bracket,","highlight_start":1,"highlight_end":55},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident { $($inner:tt)* }) => {","highlight_start":1,"highlight_end":55},{"text":"        $tokens.extend({","highlight_start":1,"highlight_end":25},{"text":"            let mut g = $crate::__private::Group::new(","highlight_start":1,"highlight_end":55},{"text":"                $crate::__private::Delimiter::Brace,","highlight_start":1,"highlight_end":53},{"text":"                $crate::quote_spanned!($span=> $($inner)*),","highlight_start":1,"highlight_end":60},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            g.set_span($span);","highlight_start":1,"highlight_end":31},{"text":"            Some($crate::__private::TokenTree::from(g))","highlight_start":1,"highlight_end":56},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_add(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident +=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_add_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &&) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_and(&mut $tokens, $span);","highlight_start":1,"highlight_end":62},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident &=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_and_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident @) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_at(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_bang(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_caret(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ^=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_caret_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident :) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_colon(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ::) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_colon2(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ,) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_comma(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_div(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident /=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_div_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident .) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_dot(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_dot2(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ...) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot3(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ..=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_dot_dot_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":65},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ==) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_eq_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ge(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_gt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_le(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_lt(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_mul_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident !=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_ne(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident |=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ||) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_or_or(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident #) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_pound(&mut $tokens, $span);","highlight_start":1,"highlight_end":60},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ?) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_question(&mut $tokens, $span);","highlight_start":1,"highlight_end":63},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ->) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rarrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <-) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_larrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_rem(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident %=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_rem_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident =>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_fat_arrow(&mut $tokens, $span);","highlight_start":1,"highlight_end":64},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident ;) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_semi(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shl(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident <<=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shl_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_shr(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident >>=) => {","highlight_start":1,"highlight_end":41},{"text":"        $crate::__private::push_shr_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident *) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_star(&mut $tokens, $span);","highlight_start":1,"highlight_end":59},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -) => {","highlight_start":1,"highlight_end":39},{"text":"        $crate::__private::push_sub(&mut $tokens, $span);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident -=) => {","highlight_start":1,"highlight_end":40},{"text":"        $crate::__private::push_sub_eq(&mut $tokens, $span);","highlight_start":1,"highlight_end":61},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $ident:ident) => {","highlight_start":1,"highlight_end":50},{"text":"        $crate::__private::push_ident(&mut $tokens, $span, stringify!($ident));","highlight_start":1,"highlight_end":80},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $other:tt) => {","highlight_start":1,"highlight_end":47},{"text":"        $crate::__private::parse(&mut $tokens, $span, stringify!($other));","highlight_start":1,"highlight_end":75},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_spanned!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":16877,"byte_end":17127,"line_start":569,"line_end":576,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_spanned {","highlight_start":1,"highlight_end":29},{"text":"    ($span:expr=> $($tt:tt)*) => {{","highlight_start":1,"highlight_end":36},{"text":"        let mut _s = $crate::__private::TokenStream::new();","highlight_start":1,"highlight_end":60},{"text":"        let _span: $crate::__private::Span = $span;","highlight_start":1,"highlight_end":52},{"text":"        $crate::quote_each_token!(_s _span $($tt)*);","highlight_start":1,"highlight_end":53},{"text":"        _s","highlight_start":1,"highlight_end":11},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_each_token!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19014,"byte_end":19418,"line_start":651,"line_end":663,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_each_token {","highlight_start":1,"highlight_end":32},{"text":"    ($tokens:ident $span:ident $($tts:tt)*) => {","highlight_start":1,"highlight_end":49},{"text":"        $crate::quote_tokens_with_context!($tokens $span","highlight_start":1,"highlight_end":57},{"text":"            (@ @ @ @ @ @ $($tts)*)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ @ $($tts)* @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ @ $($tts)* @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ @ @ $(($tts))* @ @ @)","highlight_start":1,"highlight_end":37},{"text":"            (@ @ $($tts)* @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            (@ $($tts)* @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"            ($($tts)* @ @ @ @ @ @)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_tokens_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19451,"byte_end":19773,"line_start":667,"line_end":677,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_tokens_with_context {","highlight_start":1,"highlight_end":41},{"text":"    ($tokens:ident $span:ident","highlight_start":1,"highlight_end":31},{"text":"        ($($b3:tt)*) ($($b2:tt)*) ($($b1:tt)*)","highlight_start":1,"highlight_end":47},{"text":"        ($($curr:tt)*)","highlight_start":1,"highlight_end":23},{"text":"        ($($a1:tt)*) ($($a2:tt)*) ($($a3:tt)*)","highlight_start":1,"highlight_end":47},{"text":"    ) => {","highlight_start":1,"highlight_end":11},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $crate::quote_token_with_context!($tokens $span $b3 $b2 $b1 $curr $a1 $a2 $a3);","highlight_start":1,"highlight_end":92},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::quote_token_with_context!","def_site_span":{"file_name":"/home/teo/.cargo/registry/src/github.com-1ecc6299db9ec823/quote-1.0.3/src/lib.rs","byte_start":19806,"byte_end":22607,"line_start":681,"line_end":733,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! quote_token_with_context {","highlight_start":1,"highlight_end":40},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt @ $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) * $a3:tt) => {{","highlight_start":1,"highlight_end":90},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        // This is `while true` instead of `loop` because if there are no","highlight_start":1,"highlight_end":74},{"text":"        // iterators used inside of this repetition then the body would not","highlight_start":1,"highlight_end":76},{"text":"        // contain any `break`, so the compiler would emit unreachable code","highlight_start":1,"highlight_end":76},{"text":"        // warnings on anything below the loop. We use has_iter to detect and","highlight_start":1,"highlight_end":78},{"text":"        // fail to compile when there are no iterators, so here we just work","highlight_start":1,"highlight_end":77},{"text":"        // around the unneeded extra warning.","highlight_start":1,"highlight_end":46},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) ( $($inner:tt)* ) $sep:tt *) => {{","highlight_start":1,"highlight_end":91},{"text":"        use $crate::__private::ext::*;","highlight_start":1,"highlight_end":39},{"text":"        let mut _i = 0usize;","highlight_start":1,"highlight_end":29},{"text":"        let has_iter = $crate::__private::ThereIsNoIteratorInRepetition;","highlight_start":1,"highlight_end":73},{"text":"        $crate::pounded_var_names!(quote_bind_into_iter!(has_iter) () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"        let _: $crate::__private::HasIterator = has_iter;","highlight_start":1,"highlight_end":58},{"text":"        while true {","highlight_start":1,"highlight_end":21},{"text":"            $crate::pounded_var_names!(quote_bind_next_or_break!() () $($inner)*);","highlight_start":1,"highlight_end":83},{"text":"            if _i > 0 {","highlight_start":1,"highlight_end":24},{"text":"                $crate::quote_token!($tokens $span $sep);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _i += 1;","highlight_start":1,"highlight_end":21},{"text":"            $crate::quote_each_token!($tokens $span $($inner)*);","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # (( $($inner:tt)* )) $sep:tt * $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident $b3:tt # ( $($inner:tt)* ) ($sep:tt) * $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) * (*) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":84},{"text":"        // https://github.com/dtolnay/quote/issues/130","highlight_start":1,"highlight_end":55},{"text":"        $crate::quote_token!($tokens $span *);","highlight_start":1,"highlight_end":47},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident # ( $($inner:tt)* ) $sep:tt (*) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt (#) $var:ident $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":87},{"text":"        $crate::ToTokens::to_tokens(&$var, &mut $tokens);","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt # ($var:ident) $a1:tt $a2:tt $a3:tt) => {};","highlight_start":1,"highlight_end":89},{"text":"    ($tokens:ident $span:ident $b3:tt $b2:tt $b1:tt ($curr:tt) $a1:tt $a2:tt $a3:tt) => {","highlight_start":1,"highlight_end":90},{"text":"        $crate::quote_token!($tokens $span $curr);","highlight_start":1,"highlight_end":51},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"required by `syn::export::quote::ToTokens::to_tokens`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Argument: syn::export::quote::ToTokens` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:92:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    let generated = quote! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub struct #typename {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            opcode: #args.opcode.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            regs: #args.regs.value,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `syn::export::quote::ToTokens` is not implemented for `Argument`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `syn::export::quote::ToTokens::to_tokens`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 10 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0559.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0559.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
